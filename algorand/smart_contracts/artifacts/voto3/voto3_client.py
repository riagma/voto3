# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "asset_name"}, {"type": "string", "name": "unit_name"}, {"type": "uint64", "name": "total"}], "name": "inicializar_eleccion", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "leer_estado_contrato", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "nuevo_estado"}], "name": "establecer_estado_contrato", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "abrir_registro_compromisos", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "registrar_compromiso", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "cerrar_registro_compromisos", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "num_bloques"}, {"type": "uint64", "name": "tam_bloque"}, {"type": "uint64", "name": "tam_resto"}], "name": "abrir_registro_raices", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "registrar_raiz", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "txnId_raiz"}], "name": "cerrar_registro_raices", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "leer_datos_raices", "returns": {"type": "(uint64,uint64,uint64,string)"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "abrir_registro_anuladores", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "registrar_anulador", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "destinatario"}], "name": "enviar_papeleta", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "cerrar_registro_anuladores", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "cuenta"}], "name": "recuperar_papeletas", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "finalizar_eleccion", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Voto3", "state": {"keys": {"box": {}, "global": {"estado_contrato": {"key": "ZXN0YWRvX2NvbnRyYXRv", "keyType": "AVMString", "valueType": "AVMUint64"}, "papeletas": {"key": "cGFwZWxldGFz", "keyType": "AVMString", "valueType": "AVMUint64"}, "papeletas_enviadas": {"key": "cGFwZWxldGFzX2VudmlhZGFz", "keyType": "AVMString", "valueType": "AVMUint64"}, "contador_compromisos": {"key": "Y29udGFkb3JfY29tcHJvbWlzb3M=", "keyType": "AVMString", "valueType": "AVMUint64"}, "contador_anuladores": {"key": "Y29udGFkb3JfYW51bGFkb3Jlcw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "contador_raices": {"key": "Y29udGFkb3JfcmFpY2Vz", "keyType": "AVMString", "valueType": "AVMUint64"}, "num_bloques": {"key": "bnVtX2Jsb3F1ZXM=", "keyType": "AVMString", "valueType": "AVMUint64"}, "tam_bloque": {"key": "dGFtX2Jsb3F1ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "tam_resto": {"key": "dGFtX3Jlc3Rv", "keyType": "AVMString", "valueType": "AVMUint64"}, "txnId_raiz": {"key": "dHhuSWRfcmFpeg==", "keyType": "AVMString", "valueType": "AVMString"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 9}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiAEAAEEAyYLD2VzdGFkb19jb250cmF0bwQVH3x1CXBhcGVsZXRhcxRjb250YWRvcl9jb21wcm9taXNvcw9jb250YWRvcl9yYWljZXMTY29udGFkb3JfYW51bGFkb3JlcxJwYXBlbGV0YXNfZW52aWFkYXMLbnVtX2Jsb3F1ZXMKdGFtX2Jsb3F1ZQl0YW1fcmVzdG8KdHhuSWRfcmFpejEYQAAmKCJnKiJnJwYiZysiZycEImcnBSJnJwciZycIImcnCSJnJwqAAGcxG0EBw4IQBHdX3coEOpd4awSJSwueBMf+k8AEEJtqYQSIAp3SBNMw/RwEnBekMAQCoorVBH2bPlgEToEs9wS5vc7BBGntrnUEgAZ47AQe1TJDBG8WP8k2GgCOEAErARoBBQD5AOgA1wC/AK4AlwBlAFkASAAxACAADgACIkMxGRREMRhEiAMdI0MxGRREMRhENhoBVwIAiALZI0MxGRREMRhEiAK1FilMULAjQzEZFEQxGEQ2GgFXAgCIAmAWKUxQsCNDMRkURDEYRIgCNBYpTFCwI0MxGRREMRhEiAIQI0MxGRREMRhEiAHnTwMWTwMWTwMWSwMVFlcGAk8EUE8DTwNQTwJQgAIAGlBMUClMULAjQzEZFEQxGEQ2GgFXAgCIAZAWKUxQsCNDMRkURDEYRIgBZRYpTFCwI0MxGRREMRhENhoBFzYaAhc2GgMXiAElI0MxGRREMRhEiAEDFilMULAjQzEZFEQxGESIANkWKUxQsCNDMRkURDEYRIgAtiNDMRkURDEYRDYaAReIAJYWKUxQsCNDMRkURDEYRIgAehYpTFCwI0MxGRREMRhENhoBVwIANhoCVwIANhoDF4gAEhYpTFCwI0MxGUD+rzEYFEQjQ4oDATEAMgkSRCIoZUQURIv9FYEgDkSL/hWBCA5EsTIKSbIssikisiOL/7Iii/6yJYv9siYlshAisgGzKrQ8ZygjZyIqZUSJMQAyCRJEIihlRImKAQExADIJEkQoi/9ni/+JMQAyCRJEIihlRCMSRCiBAmeJMQAyCRJEIihlRIECEkQiK2VEIwgrSwFniTEAMgkSRCIoZUSBAhJEKCVnIitlRImKAwAxADIJEkQiKGVEJRJEJweL/WcnCIv+ZycJi/9nKCRniTEAMgkSRCIoZUQkEkQiJwRlRCMIJwRLAWeJigEBMQAyCRJEIihlRCQSRCiBBWcnCov/ZyInBGVEiSIoZUSBBQ9EIicHZUQiJwhlRCInCWVEIicKZUSJMQAyCRJEIihlRIEFEkQogQZniTEAMgkSRCIoZUSBBhJEIicFZUQjCCcFSwFniYoBATEAMgkSRCIoZUSBBhJEsSIqZUSL/xWBIBJEMgqyAIv/shQjshKyESSyECKyAbMiJwZlRCMIJwZLAWeJMQAyCRJEIihlRIEGEkQogQdnIicFZUSJigEAMQAyCRJEIihlRIEHEkSxIiplRDIKi/8VgSASRIv/sgCyFCOyErIRJLIQIrIBs4mKAAAxADIJEkQiKGVEgQcSRLEiKmVEMgNHA7IssiuyKrIpsiElshAisgGzMgpzAEQyCnMBRAlJQQAQsTIJiwCyCLIHI7IQIrIBsyiBCGeJ", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 9, "patch": 0}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [1028, 1116], "errorMessage": "Address length is 32 bytes"}, {"pc": [780, 799, 824, 848, 880, 909, 932, 967, 986, 1016, 1075], "errorMessage": "El contrato no est\u00e1 en el estado correcto"}, {"pc": [684], "errorMessage": "El contrato ya est\u00e1 inicializado"}, {"pc": [1102, 1152], "errorMessage": "La elecci\u00f3n no ha acabado"}, {"pc": [332, 344, 362, 379, 402, 419, 431, 481, 504, 521, 545, 562, 579, 591, 612, 629], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [959], "errorMessage": "Solo el creador puede abrir el registro de anuladores"}, {"pc": [773], "errorMessage": "Solo el creador puede abrir el registro de compromisos"}, {"pc": [841], "errorMessage": "Solo el creador puede abrir el registro de ra\u00edces"}, {"pc": [1067], "errorMessage": "Solo el creador puede cerrar el registro de anuladores"}, {"pc": [816], "errorMessage": "Solo el creador puede cerrar el registro de compromisos"}, {"pc": [902], "errorMessage": "Solo el creador puede cerrar el registro de ra\u00edces"}, {"pc": [1008], "errorMessage": "Solo el creador puede enviar papeletas"}, {"pc": [760], "errorMessage": "Solo el creador puede establecer el estado del contrato"}, {"pc": [1144], "errorMessage": "Solo el creador puede finalizar la elecci\u00f3n"}, {"pc": [678], "errorMessage": "Solo el creador puede inicializar la elecci\u00f3n"}, {"pc": [746], "errorMessage": "Solo el creador puede leer el estado del contrato"}, {"pc": [1094], "errorMessage": "Solo el creador puede recuperar papeletas"}, {"pc": [978], "errorMessage": "Solo el creador puede registrar anuladores"}, {"pc": [791], "errorMessage": "Solo el creador puede registrar compromisos"}, {"pc": [873], "errorMessage": "Solo el creador puede registrar ra\u00edces"}, {"pc": [1183, 1188], "errorMessage": "account funded"}, {"pc": [691], "errorMessage": "asset_name demasiado largo"}, {"pc": [667], "errorMessage": "can only call when creating"}, {"pc": [335, 347, 365, 382, 405, 422, 434, 484, 507, 524, 548, 565, 582, 594, 615, 632], "errorMessage": "can only call when not creating"}, {"pc": [991, 1084], "errorMessage": "check self.contador_anuladores exists"}, {"pc": [803, 831], "errorMessage": "check self.contador_compromisos exists"}, {"pc": [885, 923], "errorMessage": "check self.contador_raices exists"}, {"pc": [682, 750, 777, 795, 820, 845, 877, 906, 928, 963, 982, 1012, 1071, 1098, 1148], "errorMessage": "check self.estado_contrato exists"}, {"pc": [937], "errorMessage": "check self.num_bloques exists"}, {"pc": [739, 1021, 1107, 1157], "errorMessage": "check self.papeletas exists"}, {"pc": [1053], "errorMessage": "check self.papeletas_enviadas exists"}, {"pc": [942], "errorMessage": "check self.tam_bloque exists"}, {"pc": [947], "errorMessage": "check self.tam_resto exists"}, {"pc": [952], "errorMessage": "check self.txnId_raiz exists"}, {"pc": [698], "errorMessage": "unit_name demasiado largo"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class InicializarEleccionArgs:
    """Dataclass for inicializar_eleccion arguments"""
    asset_name: str
    unit_name: str
    total: int

    @property
    def abi_method_signature(self) -> str:
        return "inicializar_eleccion(string,string,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class EstablecerEstadoContratoArgs:
    """Dataclass for establecer_estado_contrato arguments"""
    nuevo_estado: int

    @property
    def abi_method_signature(self) -> str:
        return "establecer_estado_contrato(uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AbrirRegistroRaicesArgs:
    """Dataclass for abrir_registro_raices arguments"""
    num_bloques: int
    tam_bloque: int
    tam_resto: int

    @property
    def abi_method_signature(self) -> str:
        return "abrir_registro_raices(uint64,uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CerrarRegistroRaicesArgs:
    """Dataclass for cerrar_registro_raices arguments"""
    txnId_raiz: str

    @property
    def abi_method_signature(self) -> str:
        return "cerrar_registro_raices(string)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class EnviarPapeletaArgs:
    """Dataclass for enviar_papeleta arguments"""
    destinatario: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "enviar_papeleta(byte[])uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RecuperarPapeletasArgs:
    """Dataclass for recuperar_papeletas arguments"""
    cuenta: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "recuperar_papeletas(byte[])void"


class Voto3Params:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def inicializar_eleccion(
        self,
        args: tuple[str, str, int] | InicializarEleccionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "inicializar_eleccion(string,string,uint64)uint64",
            "args": method_args,
        }))

    def leer_estado_contrato(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "leer_estado_contrato()uint64",
        }))

    def establecer_estado_contrato(
        self,
        args: tuple[int] | EstablecerEstadoContratoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "establecer_estado_contrato(uint64)uint64",
            "args": method_args,
        }))

    def abrir_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_compromisos()void",
        }))

    def registrar_compromiso(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_compromiso()uint64",
        }))

    def cerrar_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_compromisos()uint64",
        }))

    def abrir_registro_raices(
        self,
        args: tuple[int, int, int] | AbrirRegistroRaicesArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_raices(uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def registrar_raiz(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_raiz()uint64",
        }))

    def cerrar_registro_raices(
        self,
        args: tuple[str] | CerrarRegistroRaicesArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_raices(string)uint64",
            "args": method_args,
        }))

    def leer_datos_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "leer_datos_raices()(uint64,uint64,uint64,string)",
        }))

    def abrir_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_anuladores()void",
        }))

    def registrar_anulador(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_anulador()uint64",
        }))

    def enviar_papeleta(
        self,
        args: tuple[bytes | str] | EnviarPapeletaArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "enviar_papeleta(byte[])uint64",
            "args": method_args,
        }))

    def cerrar_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_anuladores()uint64",
        }))

    def recuperar_papeletas(
        self,
        args: tuple[bytes | str] | RecuperarPapeletasArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "recuperar_papeletas(byte[])void",
            "args": method_args,
        }))

    def finalizar_eleccion(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalizar_eleccion()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class Voto3CreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def inicializar_eleccion(
        self,
        args: tuple[str, str, int] | InicializarEleccionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "inicializar_eleccion(string,string,uint64)uint64",
            "args": method_args,
        }))

    def leer_estado_contrato(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "leer_estado_contrato()uint64",
        }))

    def establecer_estado_contrato(
        self,
        args: tuple[int] | EstablecerEstadoContratoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "establecer_estado_contrato(uint64)uint64",
            "args": method_args,
        }))

    def abrir_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_compromisos()void",
        }))

    def registrar_compromiso(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_compromiso()uint64",
        }))

    def cerrar_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_compromisos()uint64",
        }))

    def abrir_registro_raices(
        self,
        args: tuple[int, int, int] | AbrirRegistroRaicesArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_raices(uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def registrar_raiz(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_raiz()uint64",
        }))

    def cerrar_registro_raices(
        self,
        args: tuple[str] | CerrarRegistroRaicesArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_raices(string)uint64",
            "args": method_args,
        }))

    def leer_datos_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "leer_datos_raices()(uint64,uint64,uint64,string)",
        }))

    def abrir_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_anuladores()void",
        }))

    def registrar_anulador(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_anulador()uint64",
        }))

    def enviar_papeleta(
        self,
        args: tuple[bytes | str] | EnviarPapeletaArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "enviar_papeleta(byte[])uint64",
            "args": method_args,
        }))

    def cerrar_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_anuladores()uint64",
        }))

    def recuperar_papeletas(
        self,
        args: tuple[bytes | str] | RecuperarPapeletasArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "recuperar_papeletas(byte[])void",
            "args": method_args,
        }))

    def finalizar_eleccion(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalizar_eleccion()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class Voto3Send:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def inicializar_eleccion(
        self,
        args: tuple[str, str, int] | InicializarEleccionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "inicializar_eleccion(string,string,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def leer_estado_contrato(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "leer_estado_contrato()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def establecer_estado_contrato(
        self,
        args: tuple[int] | EstablecerEstadoContratoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "establecer_estado_contrato(uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def abrir_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_compromisos()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def registrar_compromiso(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_compromiso()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def cerrar_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_compromisos()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def abrir_registro_raices(
        self,
        args: tuple[int, int, int] | AbrirRegistroRaicesArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_raices(uint64,uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def registrar_raiz(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_raiz()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def cerrar_registro_raices(
        self,
        args: tuple[str] | CerrarRegistroRaicesArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_raices(string)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def leer_datos_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, int, str]]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "leer_datos_raices()(uint64,uint64,uint64,string)",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, int, str]], parsed_response)

    def abrir_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "abrir_registro_anuladores()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def registrar_anulador(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registrar_anulador()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def enviar_papeleta(
        self,
        args: tuple[bytes | str] | EnviarPapeletaArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "enviar_papeleta(byte[])uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def cerrar_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cerrar_registro_anuladores()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def recuperar_papeletas(
        self,
        args: tuple[bytes | str] | RecuperarPapeletasArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "recuperar_papeletas(byte[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def finalizar_eleccion(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalizar_eleccion()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    estado_contrato: int
    papeletas: int
    papeletas_enviadas: int
    contador_compromisos: int
    contador_anuladores: int
    contador_raices: int
    num_bloques: int
    tam_bloque: int
    tam_resto: int
    txnId_raiz: str

class Voto3State:
    """Methods to access state for the current Voto3 app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def estado_contrato(self) -> int:
        """Get the current value of the estado_contrato key in global_state state"""
        value = self.app_client.state.global_state.get_value("estado_contrato")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def papeletas(self) -> int:
        """Get the current value of the papeletas key in global_state state"""
        value = self.app_client.state.global_state.get_value("papeletas")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def papeletas_enviadas(self) -> int:
        """Get the current value of the papeletas_enviadas key in global_state state"""
        value = self.app_client.state.global_state.get_value("papeletas_enviadas")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def contador_compromisos(self) -> int:
        """Get the current value of the contador_compromisos key in global_state state"""
        value = self.app_client.state.global_state.get_value("contador_compromisos")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def contador_anuladores(self) -> int:
        """Get the current value of the contador_anuladores key in global_state state"""
        value = self.app_client.state.global_state.get_value("contador_anuladores")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def contador_raices(self) -> int:
        """Get the current value of the contador_raices key in global_state state"""
        value = self.app_client.state.global_state.get_value("contador_raices")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def num_bloques(self) -> int:
        """Get the current value of the num_bloques key in global_state state"""
        value = self.app_client.state.global_state.get_value("num_bloques")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def tam_bloque(self) -> int:
        """Get the current value of the tam_bloque key in global_state state"""
        value = self.app_client.state.global_state.get_value("tam_bloque")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def tam_resto(self) -> int:
        """Get the current value of the tam_resto key in global_state state"""
        value = self.app_client.state.global_state.get_value("tam_resto")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def txn_id_raiz(self) -> str:
        """Get the current value of the txnId_raiz key in global_state state"""
        value = self.app_client.state.global_state.get_value("txnId_raiz")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

class Voto3Client:
    """Client for interacting with Voto3 smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = Voto3Params(self.app_client)
        self.create_transaction = Voto3CreateTransactionParams(self.app_client)
        self.send = Voto3Send(self.app_client)
        self.state = Voto3State(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "Voto3Client":
        return Voto3Client(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "Voto3Client":
        return Voto3Client(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "Voto3Client":
        return Voto3Client(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "Voto3Composer":
        return Voto3Composer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["inicializar_eleccion(string,string,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["leer_estado_contrato()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["establecer_estado_contrato(uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["abrir_registro_compromisos()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["registrar_compromiso()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["cerrar_registro_compromisos()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["abrir_registro_raices(uint64,uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["registrar_raiz()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["cerrar_registro_raices(string)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["leer_datos_raices()(uint64,uint64,uint64,string)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, int, str] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["abrir_registro_anuladores()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["registrar_anulador()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["enviar_papeleta(byte[])uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["cerrar_registro_anuladores()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["recuperar_papeletas(byte[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["finalizar_eleccion()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | tuple[int, int, int, str]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class Voto3BareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating Voto3 contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class Voto3Factory(algokit_utils.TypedAppFactoryProtocol[Voto3BareCallCreateParams, None, None]):
    """Factory for deploying and managing Voto3Client smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = Voto3FactoryParams(self.app_factory)
        self.create_transaction = Voto3FactoryCreateTransaction(self.app_factory)
        self.send = Voto3FactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: Voto3BareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[Voto3Client, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return Voto3Client(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> Voto3Client:
        """Get an app client by creator address and name"""
        return Voto3Client(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> Voto3Client:
        """Get an app client by app ID"""
        return Voto3Client(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class Voto3FactoryParams:
    """Parameters for creating transactions for Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = Voto3FactoryCreateParams(app_factory)
        self.update = Voto3FactoryUpdateParams(app_factory)
        self.delete = Voto3FactoryDeleteParams(app_factory)

class Voto3FactoryCreateParams:
    """Parameters for 'create' operations of Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def inicializar_eleccion(
        self,
        args: tuple[str, str, int] | InicializarEleccionArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the inicializar_eleccion(string,string,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "inicializar_eleccion(string,string,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def leer_estado_contrato(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the leer_estado_contrato()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "leer_estado_contrato()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def establecer_estado_contrato(
        self,
        args: tuple[int] | EstablecerEstadoContratoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the establecer_estado_contrato(uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "establecer_estado_contrato(uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def abrir_registro_compromisos(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the abrir_registro_compromisos()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "abrir_registro_compromisos()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def registrar_compromiso(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the registrar_compromiso()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "registrar_compromiso()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def cerrar_registro_compromisos(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the cerrar_registro_compromisos()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "cerrar_registro_compromisos()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def abrir_registro_raices(
        self,
        args: tuple[int, int, int] | AbrirRegistroRaicesArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the abrir_registro_raices(uint64,uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "abrir_registro_raices(uint64,uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def registrar_raiz(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the registrar_raiz()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "registrar_raiz()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def cerrar_registro_raices(
        self,
        args: tuple[str] | CerrarRegistroRaicesArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the cerrar_registro_raices(string)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "cerrar_registro_raices(string)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def leer_datos_raices(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the leer_datos_raices()(uint64,uint64,uint64,string) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "leer_datos_raices()(uint64,uint64,uint64,string)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def abrir_registro_anuladores(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the abrir_registro_anuladores()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "abrir_registro_anuladores()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def registrar_anulador(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the registrar_anulador()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "registrar_anulador()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def enviar_papeleta(
        self,
        args: tuple[bytes | str] | EnviarPapeletaArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the enviar_papeleta(byte[])uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "enviar_papeleta(byte[])uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def cerrar_registro_anuladores(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the cerrar_registro_anuladores()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "cerrar_registro_anuladores()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def recuperar_papeletas(
        self,
        args: tuple[bytes | str] | RecuperarPapeletasArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the recuperar_papeletas(byte[])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "recuperar_papeletas(byte[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def finalizar_eleccion(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the finalizar_eleccion()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "finalizar_eleccion()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class Voto3FactoryUpdateParams:
    """Parameters for 'update' operations of Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class Voto3FactoryDeleteParams:
    """Parameters for 'delete' operations of Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class Voto3FactoryCreateTransaction:
    """Create transactions for Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = Voto3FactoryCreateTransactionCreate(app_factory)


class Voto3FactoryCreateTransactionCreate:
    """Create new instances of Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class Voto3FactorySend:
    """Send calls to Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = Voto3FactorySendCreate(app_factory)


class Voto3FactorySendCreate:
    """Send create calls to Voto3 contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[Voto3Client, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return Voto3Client(result[0]), result[1]


class Voto3Composer:
    """Composer for creating transaction groups for Voto3 contract calls"""

    def __init__(self, client: "Voto3Client"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def inicializar_eleccion(
        self,
        args: tuple[str, str, int] | InicializarEleccionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.inicializar_eleccion(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "inicializar_eleccion(string,string,uint64)uint64", v
            )
        )
        return self

    def leer_estado_contrato(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.leer_estado_contrato(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "leer_estado_contrato()uint64", v
            )
        )
        return self

    def establecer_estado_contrato(
        self,
        args: tuple[int] | EstablecerEstadoContratoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.establecer_estado_contrato(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "establecer_estado_contrato(uint64)uint64", v
            )
        )
        return self

    def abrir_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.abrir_registro_compromisos(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "abrir_registro_compromisos()void", v
            )
        )
        return self

    def registrar_compromiso(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.registrar_compromiso(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "registrar_compromiso()uint64", v
            )
        )
        return self

    def cerrar_registro_compromisos(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.cerrar_registro_compromisos(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "cerrar_registro_compromisos()uint64", v
            )
        )
        return self

    def abrir_registro_raices(
        self,
        args: tuple[int, int, int] | AbrirRegistroRaicesArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.abrir_registro_raices(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "abrir_registro_raices(uint64,uint64,uint64)void", v
            )
        )
        return self

    def registrar_raiz(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.registrar_raiz(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "registrar_raiz()uint64", v
            )
        )
        return self

    def cerrar_registro_raices(
        self,
        args: tuple[str] | CerrarRegistroRaicesArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.cerrar_registro_raices(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "cerrar_registro_raices(string)uint64", v
            )
        )
        return self

    def leer_datos_raices(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.leer_datos_raices(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "leer_datos_raices()(uint64,uint64,uint64,string)", v
            )
        )
        return self

    def abrir_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.abrir_registro_anuladores(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "abrir_registro_anuladores()void", v
            )
        )
        return self

    def registrar_anulador(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.registrar_anulador(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "registrar_anulador()uint64", v
            )
        )
        return self

    def enviar_papeleta(
        self,
        args: tuple[bytes | str] | EnviarPapeletaArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.enviar_papeleta(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "enviar_papeleta(byte[])uint64", v
            )
        )
        return self

    def cerrar_registro_anuladores(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.cerrar_registro_anuladores(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "cerrar_registro_anuladores()uint64", v
            )
        )
        return self

    def recuperar_papeletas(
        self,
        args: tuple[bytes | str] | RecuperarPapeletasArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.recuperar_papeletas(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "recuperar_papeletas(byte[])void", v
            )
        )
        return self

    def finalizar_eleccion(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "Voto3Composer":
        self._composer.add_app_call_method_call(
            self.client.params.finalizar_eleccion(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "finalizar_eleccion()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "Voto3Composer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "Voto3Composer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
