{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"3735346907003318","abi":{"parameters":[{"name":"clave","type":{"kind":"field"},"visibility":"private"},{"name":"anulador","type":{"kind":"field"},"visibility":"private"},{"name":"path","type":{"kind":"array","length":11,"type":{"kind":"field"}},"visibility":"private"},{"name":"idxs","type":{"kind":"array","length":11,"type":{"kind":"field"}},"visibility":"private"},{"name":"raiz","type":{"kind":"field"},"visibility":"public"},{"name":"anulador_hash","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9WciXNURRDGe3cTSACVI5ErKqggUcGZPZJdFUxUkKggUUGiciSykaggUUHwxPu++IMtu2WmaurlQb3i9fdqZqq69tVu0vm+PvLbJJut0c1zg+MMrTw1dzvlbltmot3uTzb7tmXnTbO30O2Ydmdhomu7ttPtnGt2W61+t92d7C30Jk3Ptlt9u9jptRbNzbMtyGVKHqTO7Xeus5m9Q7Rt5BjIaP3XXdeC623B9XZ37T9vjOM+jvs5HgjuR9Vgx53XwBapwa18h9c7MjXYyfEgx0McD+fUoK5cg62kNq92p14uk52l282BKXfsXYq6Q727kIJ3AfLuVhwslO/dQYGV8uZqLeu/7rRq5/0S7NuUO3YM5PsrwoB1QNl/XdHzI4q6FOfGptKLMcVe7AHtcEx7kfckRmbQP1nZQ8WeyI1zPMrxGMfj7v4qgX43YYC+Fyl4LyDvPoob6OJ7X1BgpbwQoDecVu28X4N9m3LHjoN8X6c0INJQ9PyEoi7FubHXE+nFuGIvDGiHY9qLPKDLDHpwGyoGdMvRFG8cbaoe6PcQBugdpOAOIO8ExQ108T0RFFgpLwToA06rdt5vwL5NuWMtyPe3lAZEBhQ9TyrqUpwbm0ovrGIvuqAdjmkv8oAuM+jB3aViQO9xPMnxFMfTVD3Q1xMG6PuRgvcD8h6guIEuvg8EBVbKCwH6oNOqnfc7sG9T7tgeyPf3lAZEBhU9P6OoS3FubCq96Cn2Ygq0wzHtRR7QZQY9uKeoGNCnOZ7leI7jeaoe6BsIA/SDSMEHAXkPUdxAF9+HggIr5YUAfZXTqp33B7BvU+7YaZDvHykNiKxS9PyCoi7FubGp9GJasReHQTsc017kAV1m0IP7MBUD+gzHixwvcbxM1QN9I2GAfgQp+Agg71GKG+ji+2hQYKW8EKCvdlq18/4E9m3KHTsD8v0zpQGR1YqeX1HUpTg3NpVezCj24hhoh2Paizygywx6cB+jYkCf5XiV4zWO16l6oG8iDNCPIwUfB+Q9QXEDXXyfCAqslBcC9CGnVTvvL2DfptyxsyDfv1IaEBlS9PyGoi7FubGp9GJWsRcnQTsc017kAV1m0IP7JBUD+hzHmxxvcbxN1QN9hDBAP4UUfAqQ9zTFDXTxfToosFJeCNCHnVbtvL+BfZtyx86BfP9OaUBkWNHzGUVdinNjU+nFnGIvzoJ2OKa9yAO6zKAH91kqBvR5jgWOdzjOUfVAHyUM0PtIwX1A3kWKG+jiezEosFJeCNDXOK3aef8A+zbljp0H+f6T0oDIGkXP7yrqUpwbm0ov5hV7cR60wzHtRR7QZQY9uM9TMaAvcbzH8T7HB1Q90O8lDNAvIAVfAOS9SHEDXXxfDAqslBcC9LVOq3bev8C+Tbljl0C+/6Y0ILJW0fOHiroU58am0oslxV5cAu1wTHuRB3SZQQ/uS1QM6MscH3F8zPEJVQ/0zYQB+mWk4MuAvFcobqCL7ytBgZXyQoC+zmnVzvsP2Lcpd+wyyPcNSgMi6xQ9f6qoS3FubCq9WFbsxVXQDse0F3lAlxn04L5KxYB+jeMzjs85viD8291uUZyZa8r19N63BP5rrgYN97j8q6v8d4y8oFZegyN/tpPf9MkPB/L9RN4hVd5UTd6HZT3HBtcneU2Z/BlafnMtP+xuDmorX28rrTz++/Jw5nY0eLyhWE+ffwST//8Xn2fPaHA9kvFZDx6bUtLg8zXc7SCtPPXMY/5jhzL6avr6bFZLI+dr+bPJ3Y4E9/l6/gdaoCtYd10AAA==","debug_symbols":"pZfBjuIwEET/JWcO7rbbbc+vrFajAGEUKQooAyOt0Pz7GlKG4eBoFF8owOlHV6dshWuz77aXj/d+PBw/m7c/12Y79cPQf7wPx1177o9j+vb6vWnyx/fz1HXpq+bHeqo6tVM3npu38TIMm+arHS73iz5P7XjXczulVbNpunGfNAEP/dDd3n1vntWmXCo2F4uGR7m81lO53gqj3pF/1utLPZfrmUMEgK3hEsGWCUQ+t0AUZE0PSj73oNaUCLLQg6rNPWgsuvBlQnQCQJSwop4MP6ZgvKzxEE2+ExS56GEhSz7mMarVYpZMZZhoIY3sQ44z+2iLiIUwkH2OwXLxVpCtvJeLc4jhMQdZNYffJZp8daRJqzO52EV1KFVyIjSaUijN0s3MHqKLa+rV5fpAK+qJWB/Hm1vjIAHomWguEdjVnvJSfcyzrz/npXpbcKjeFhwrj4clwC/31aKN6n1FNuZgkyP7kqq/6VO766eXh53GNG+pI7q/8v3VptokbhZJLacf9LeIbBqdJcwSUwZTiMlACcpQC3Xz5SRQwEixHqDgMXgMHvN8PVsoeCxY91DwGDwGz5r5ektQ8Cz6sw4KngXPgmdh18ZZHXgO/Tn4deA58Bx4Dn4dpufAc+hP4FfAE/AEPIFfwfwEPEF/Ar8CngfPg+fh12N+HjyP/jz8evA8eB48hV/F/BQ8RX8KvwqegqfgKfwq5hfAC+gvwG8AL4AXwAvwG3L6wAvoL8JvBC+CF8GLN95tL3y1U99uhw5P+YfLuPvx0H/+d8or+W/BaTruuv1l6m575r6WdtF/","file_map":{"50":{"source":"use poseidon::poseidon2;\n\nglobal DEPTH: u32 = 11;\n\nfn main(\n    // Entradas privadas\n    clave: Field,\n    anulador: Field,\n    path: [Field; DEPTH],       // Camino de hermanos desde hoja hasta raiz\n    idxs: [Field; DEPTH],       // 0 = izquierda, 1 = derecha para cada nivel\n\n    // Entradas publicas\n    raiz: pub Field,            // Raiz del arbol Merkle\n    anulador_hash: pub Field    // Hash del anulador para evitar doble gasto\n) {\n    // 1. Calcular la hoja a partir de clave + anulador usando Poseidon2\n    let hoja = poseidon2::Poseidon2::hash([clave, anulador], 2);\n\n    // 2. Verificar que el anulador_hash publico corresponde al anulador privado\n    let anulador_hash_calculado = poseidon2::Poseidon2::hash([anulador], 1);\n    assert(anulador_hash_calculado == anulador_hash);\n    \n    // 3. Verificar el camino Merkle desde la hoja hasta la raiz\n    let mut hash_actual = hoja;\n\n    for i in 0..DEPTH {\n        let hermano = path[i];\n        let posicion = idxs[i];\n\n        // Si posicion == 0, hash_actual va a la izquierda\n        // Si posicion == 1, hash_actual va a la derecha\n        let izquierda = if posicion == 0 { hash_actual } else { hermano };\n        let derecha = if posicion == 0 { hermano } else { hash_actual };\n\n        hash_actual = poseidon2::Poseidon2::hash([izquierda, derecha], 2);\n    }\n\n    // 4. Verificar que llegamos a la raiz esperada\n    assert(hash_actual == raiz);\n    \n}\n\n#[test]\nfn test_merkle_proof() {\n    let clave = 123;\n    let anulador = 456;\n    let anulador_hash = poseidon2::Poseidon2::hash([anulador], 1);\n\n    let path: [Field; DEPTH] = [0; DEPTH];\n    let idxs: [Field; DEPTH] = [0; DEPTH];\n\n    // Calcula la hoja\n    let hoja = poseidon2::Poseidon2::hash([clave, anulador], 2);\n    let mut hash_actual = hoja;\n    for i in 0..DEPTH {\n        let hermano = path[i];\n        let posicion = idxs[i];\n        let izquierda = if posicion == 0 { hash_actual } else { hermano };\n        let derecha = if posicion == 0 { hermano } else { hash_actual };\n        hash_actual = poseidon2::Poseidon2::hash([izquierda, derecha], 2);\n    }\n    let raiz = hash_actual;\n\n    main(clave, anulador, path, idxs, raiz, anulador_hash);\n}\n","path":"/home/ram/Workspace/Voting/vanilla_v0.1/backend/noir/merkle11_hash/src/main.nr"},"57":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/home/ram/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"}},"names":["main"],"brillig_names":["directive_invert"]}