{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"17551805111363765295","abi":{"parameters":[{"name":"clave1","type":{"kind":"field"},"visibility":"private"},{"name":"clave2","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/9VV226DMAx1uPSysk3a6H/EJCnJW39laPT/v2AaG4nkGlqpkDz0SJEtBw7HJ2AEjHgf1t7nhY8Cpgi1s49yHVDE45JUb55ScJ6AtyBcSp607tumR4VfsnGdNVKb7mTRorHmu7FK9Vbb1nWulQ616vFinLp4slR9F8TgSLwS7rxca30on0TnZrlO5IU/bR8w/Yh/fF7eyDc+D/dth7WDcSi8wPXZp/DgsNyD5lEPxA0PDsyDalivw3qDcUCGeha598L7vbB/jv9ZUs3olOuAWcSeK4g7+PnZ0HOn+dz+nsUj2c8j+hf46zT8cgtTHElesz6pF+dIGgJf+AGXMEXG9sK1O6ZPxNeHwJDPPCvg08ea1IKfv1fHujk5CQAA","debug_symbols":"pVTBjoMgEP0XzhwYEJD+ymbTUEsbEoKG6iabpv9etGL1AGnqxRGG9xjem8wdnc1puB6tv7Q3dPi5o1Owztnr0bWN7m3r4+79gVFaHvtgTNxCq3xEdToY36ODH5zD6E+7YTp067SfYq9DzBKMjD/HGAkv1pnx74HfaJKHKgIzWAFd4PxzPF3wguTwNI9nnM74CsQbLzd4lsdTUafXU6FYjqHKMwAjamYARuscAy9oUPGkAc/iSxqoetGAf6OBBJE0kIzkGOqCBlKypIFUNMegCgyEJiOBCP5NDertg6LZGkq9WMNSwtrIbTPC3m6E/VZAtdsL2NuQJYIP3Sw+o2Dnb1zpxobNMEQknsQIpi+dvmy8HqPqFfgriFEXjOQYHuP9weqTM/M8vQy+WY3X/r9LmTSAu9A25jwEM94+5WI9Tw==","file_map":{"50":{"source":"use poseidon::poseidon2;\n\n// fn main(inputs: [Field; 4], len: u32) -> pub Field {\n//     let hash = if len == 1 {\n//         poseidon2::Poseidon2::hash(inputs, 1)\n//     } else if len == 2 {\n//         poseidon2::Poseidon2::hash(inputs, 2)\n//     } else if len == 3 {\n//         poseidon2::Poseidon2::hash(inputs, 3)\n//     } else {\n//         poseidon2::Poseidon2::hash(inputs, 4)\n//     };\n//     hash\n// }\n\n// // Ejemplo de test\n// #[test]\n// fn test_poseidon2_hash_array() {\n//     let arr: [Field; 4] = [1, 2, 3, 4];\n//     let hash_1 = main(arr, 1); // Hash de [1]\n//     let hash_2 = main(arr, 2); // Hash de [1, 2]\n//     let hash_3 = main(arr, 3); // Hash de [1, 2, 3]\n//     let hash_4 = main(arr, 4); // Hash de [1, 2, 3, 4]\n//     assert(hash_1 != hash_2);\n//     assert(hash_2 != hash_3);\n//     assert(hash_3 != hash_4);\n// }\n\nfn main(clave1: Field, clave2: Field) -> pub Field {\n    if clave2 == 0 {\n      poseidon2::Poseidon2::hash([clave1], 1)\n     } else {\n      poseidon2::Poseidon2::hash([clave1, clave2], 2)\n   }\n}\n\n#[test]\nfn test_poseidon2_main() {\n    // Caso 1: Solo clave1 (clave2 = 0)\n    let clave1: Field = 123;\n    let clave2: Field = 0;\n    let hash1 = main(clave1, clave2);\n    let esperado1 = poseidon2::Poseidon2::hash([clave1], 1);\n    assert(hash1 == esperado1);\n\n    // Caso 2: clave1 y clave2 distintos de 0\n    let clave1b: Field = 123;\n    let clave2b: Field = 456;\n    let hash2 = main(clave1b, clave2b);\n    let esperado2 = poseidon2::Poseidon2::hash([clave1b, clave2b], 2);\n    assert(hash2 == esperado2);\n\n    // Los hashes deben ser diferentes\n    assert(hash1 != hash2);\n}\n\n","path":"/home/ram/Workspace/Voting/vanilla_v0.1/backend/noir/poseidon2/src/main.nr"},"57":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/home/ram/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"}},"names":["main"],"brillig_names":["directive_invert"]}