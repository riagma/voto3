{
  "version": 3,
  "sources": [
    "../../voto3/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCQ;AAAuB;AAAvB;AAEA;AAAiB;AAAjB;AACA;;AAA0B;AAA1B;AAEA;AAA4B;AAA5B;AACA;;AAAuB;AAAvB;AACA;;AAA2B;AAA3B;AAEA;;AAAmB;AAAnB;AACA;;AAAkB;AAAlB;AACA;;AAAiB;AAAjB;AAEA;;AAAkB;;AAAlB;AAjCR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAkPK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAnOL;;;AAAA;;;AAmOK;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAjML;;;AAAA;;;AAiMK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AArJL;;;AAAA;;;AAqJK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA1HL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA0HK;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA7EL;;;AAAA;AA6EK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AArCL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAqCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArCL;;AAAA;;;;;;;;;AAqCA;;;AAQY;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAA;AAAP;AAKO;;AAAA;AAAqB;;AAArB;AAAP;AACO;;AAAA;AAAqB;;AAArB;AAAP;AAEY;AAKA;;AACC;;;;;AAFA;;;;;;;;;;;;;;;AAJD;;;AAAA;;;AAAA;AASZ;;;AAAA;AACA;AAAuB;AAAvB;AACO;AAAA;AAAA;AAAA;AAAP;AAOI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAP;AAER;;;AAGY;;AAAc;;AAAd;AADJ;AAGA;AAAA;;AAAA;AACA;;AAAA;AAOI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGA;AAAuB;;AAAvB;;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGe;AAAA;AAAA;AAAA;AAC4B;AAAf;AAA5B;AAAA;;AAAA;AACA;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGA;AAAuB;AAAvB;AACO;AAAA;AAAA;AAAA;AAAP;AAIR;;;AAKY;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAuB;AAAvB;;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGe;AAAA;;AAAA;AAAA;AACuB;AAAf;AAAvB;;AAAA;;AAAA;AACA;AAER;;;AAGY;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;AAAxB;AAAP;AAGA;AAAuB;;AAAvB;AACA;;AAAA;;AAAA;AACO;AAAA;;AAAA;AAAA;AAAP;AAIO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGQ;AAAA;;AAAA;AAAA;AAAkB;AAAA;;AAAA;AAAA;AAAiB;AAAA;;AAAA;AAAA;AAAgB;AAAA;;AAAA;AAAA;AAA3D;AAQI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGA;AAAuB;;AAAvB;;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGe;AAAA;;AAAA;AAAA;AAC2B;AAAf;AAA3B;;AAAA;;AAAA;AACA;AAER;;;AAGY;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAIA;AACe;AAAA;AAAA;AAAA;AAEI;;AAAA;AAAA;;AAAA;AAAA;AACR;;;;;;;;AAFM;;;;;AAFjB;;;AAKQ;;;AALR;AAQe;AAAA;;AAAA;AAAA;AAC0B;AAAf;AAA1B;;AAAA;;AAAA;AACA;AAKI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGA;AAAuB;;AAAvB;AACO;AAAA;;AAAA;AAAA;AAAP;AAIR;;;AAGY;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAEA;AACe;AAAA;AAAA;AAAA;AAEI;;AACR;;AAAA;AAAA;;AAAA;AAAA;;;;;;;AAFM;;;;;AAFjB;;;AAKQ;;;AALR;;AAQR;;;AAGY;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGA;AACiB;AAAA;AAAA;AAAA;AACL;;AACA;;;;;;;;;;;;AAHZ;;;AAMQ;;;AANR;AAUQ;;AAAA;;AAAA;AACM;;AAAA;;AAAA;AACF;AAAZ;AACR;;;AACY;AACa;;;;;;;;AADb;;;AAGQ;;;AAHR;AAMJ;AAAuB;;AAAvB;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 3"
    },
    "7": {
      "op": "bytecblock \"estado_contrato\" 0x151f7c75 \"papeletas\" \"contador_compromisos\" \"contador_raices\" \"contador_anuladores\" \"papeletas_enviadas\" \"num_bloques\" \"tam_bloque\" \"tam_resto\" \"txnId_raiz\""
    },
    "160": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "165": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\""
      ],
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "166": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "0"
      ]
    },
    "167": {
      "op": "app_global_put",
      "stack_out": []
    },
    "168": {
      "op": "bytec_2 // \"papeletas\"",
      "defined_out": [
        "\"papeletas\""
      ],
      "stack_out": [
        "\"papeletas\""
      ]
    },
    "169": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"papeletas\"",
        "0"
      ]
    },
    "170": {
      "op": "app_global_put",
      "stack_out": []
    },
    "171": {
      "op": "bytec 6 // \"papeletas_enviadas\"",
      "defined_out": [
        "\"papeletas_enviadas\""
      ],
      "stack_out": [
        "\"papeletas_enviadas\""
      ]
    },
    "173": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"papeletas_enviadas\"",
        "0"
      ]
    },
    "174": {
      "op": "app_global_put",
      "stack_out": []
    },
    "175": {
      "op": "bytec_3 // \"contador_compromisos\"",
      "defined_out": [
        "\"contador_compromisos\""
      ],
      "stack_out": [
        "\"contador_compromisos\""
      ]
    },
    "176": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"contador_compromisos\"",
        "0"
      ]
    },
    "177": {
      "op": "app_global_put",
      "stack_out": []
    },
    "178": {
      "op": "bytec 4 // \"contador_raices\"",
      "defined_out": [
        "\"contador_raices\""
      ],
      "stack_out": [
        "\"contador_raices\""
      ]
    },
    "180": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"contador_raices\"",
        "0"
      ]
    },
    "181": {
      "op": "app_global_put",
      "stack_out": []
    },
    "182": {
      "op": "bytec 5 // \"contador_anuladores\"",
      "defined_out": [
        "\"contador_anuladores\""
      ],
      "stack_out": [
        "\"contador_anuladores\""
      ]
    },
    "184": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"contador_anuladores\"",
        "0"
      ]
    },
    "185": {
      "op": "app_global_put",
      "stack_out": []
    },
    "186": {
      "op": "bytec 7 // \"num_bloques\"",
      "defined_out": [
        "\"num_bloques\""
      ],
      "stack_out": [
        "\"num_bloques\""
      ]
    },
    "188": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"num_bloques\"",
        "0"
      ]
    },
    "189": {
      "op": "app_global_put",
      "stack_out": []
    },
    "190": {
      "op": "bytec 8 // \"tam_bloque\"",
      "defined_out": [
        "\"tam_bloque\""
      ],
      "stack_out": [
        "\"tam_bloque\""
      ]
    },
    "192": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"tam_bloque\"",
        "0"
      ]
    },
    "193": {
      "op": "app_global_put",
      "stack_out": []
    },
    "194": {
      "op": "bytec 9 // \"tam_resto\"",
      "defined_out": [
        "\"tam_resto\""
      ],
      "stack_out": [
        "\"tam_resto\""
      ]
    },
    "196": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"tam_resto\"",
        "0"
      ]
    },
    "197": {
      "op": "app_global_put",
      "stack_out": []
    },
    "198": {
      "op": "bytec 10 // \"txnId_raiz\"",
      "defined_out": [
        "\"txnId_raiz\""
      ],
      "stack_out": [
        "\"txnId_raiz\""
      ]
    },
    "200": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"txnId_raiz\""
      ],
      "stack_out": [
        "\"txnId_raiz\"",
        "\"\""
      ]
    },
    "202": {
      "op": "app_global_put",
      "stack_out": []
    },
    "203": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "205": {
      "op": "bz main_bare_routing@21",
      "stack_out": []
    },
    "208": {
      "op": "pushbytess 0x7757ddca 0x3a97786b 0x894b0b9e 0xc7fe93c0 0x109b6a61 0x88029dd2 0xd330fd1c 0x9c17a430 0x02a28ad5 0x7d9b3e58 0x4e812cf7 0xb9bdcec1 0x69edae75 0x800678ec 0x1ed53243 0x6f163fc9 // method \"inicializar_eleccion(string,string,uint64)uint64\", method \"leer_estado_contrato()uint64\", method \"establecer_estado_contrato(uint64)uint64\", method \"abrir_registro_compromisos()void\", method \"registrar_compromiso()uint64\", method \"cerrar_registro_compromisos()uint64\", method \"abrir_registro_raices(uint64,uint64,uint64)void\", method \"registrar_raiz()uint64\", method \"cerrar_registro_raices(string)uint64\", method \"leer_datos_raices()(uint64,uint64,uint64,string)\", method \"abrir_registro_anuladores()void\", method \"registrar_anulador()uint64\", method \"enviar_papeleta(byte[])uint64\", method \"cerrar_registro_anuladores()uint64\", method \"recuperar_papeletas(byte[])void\", method \"finalizar_eleccion()void\"",
      "defined_out": [
        "Method(abrir_registro_anuladores()void)",
        "Method(abrir_registro_compromisos()void)",
        "Method(abrir_registro_raices(uint64,uint64,uint64)void)",
        "Method(cerrar_registro_anuladores()uint64)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(cerrar_registro_raices(string)uint64)",
        "Method(enviar_papeleta(byte[])uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(finalizar_eleccion()void)",
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_datos_raices()(uint64,uint64,uint64,string))",
        "Method(leer_estado_contrato()uint64)",
        "Method(recuperar_papeletas(byte[])void)",
        "Method(registrar_anulador()uint64)",
        "Method(registrar_compromiso()uint64)",
        "Method(registrar_raiz()uint64)"
      ],
      "stack_out": [
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_estado_contrato()uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(abrir_registro_compromisos()void)",
        "Method(registrar_compromiso()uint64)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(abrir_registro_raices(uint64,uint64,uint64)void)",
        "Method(registrar_raiz()uint64)",
        "Method(cerrar_registro_raices(string)uint64)",
        "Method(leer_datos_raices()(uint64,uint64,uint64,string))",
        "Method(abrir_registro_anuladores()void)",
        "Method(registrar_anulador()uint64)",
        "Method(enviar_papeleta(byte[])uint64)",
        "Method(cerrar_registro_anuladores()uint64)",
        "Method(recuperar_papeletas(byte[])void)",
        "Method(finalizar_eleccion()void)"
      ]
    },
    "290": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(abrir_registro_anuladores()void)",
        "Method(abrir_registro_compromisos()void)",
        "Method(abrir_registro_raices(uint64,uint64,uint64)void)",
        "Method(cerrar_registro_anuladores()uint64)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(cerrar_registro_raices(string)uint64)",
        "Method(enviar_papeleta(byte[])uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(finalizar_eleccion()void)",
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_datos_raices()(uint64,uint64,uint64,string))",
        "Method(leer_estado_contrato()uint64)",
        "Method(recuperar_papeletas(byte[])void)",
        "Method(registrar_anulador()uint64)",
        "Method(registrar_compromiso()uint64)",
        "Method(registrar_raiz()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(inicializar_eleccion(string,string,uint64)uint64)",
        "Method(leer_estado_contrato()uint64)",
        "Method(establecer_estado_contrato(uint64)uint64)",
        "Method(abrir_registro_compromisos()void)",
        "Method(registrar_compromiso()uint64)",
        "Method(cerrar_registro_compromisos()uint64)",
        "Method(abrir_registro_raices(uint64,uint64,uint64)void)",
        "Method(registrar_raiz()uint64)",
        "Method(cerrar_registro_raices(string)uint64)",
        "Method(leer_datos_raices()(uint64,uint64,uint64,string))",
        "Method(abrir_registro_anuladores()void)",
        "Method(registrar_anulador()uint64)",
        "Method(enviar_papeleta(byte[])uint64)",
        "Method(cerrar_registro_anuladores()uint64)",
        "Method(recuperar_papeletas(byte[])void)",
        "Method(finalizar_eleccion()void)",
        "tmp%2#0"
      ]
    },
    "293": {
      "op": "match main_inicializar_eleccion_route@5 main_leer_estado_contrato_route@6 main_establecer_estado_contrato_route@7 main_abrir_registro_compromisos_route@8 main_registrar_compromiso_route@9 main_cerrar_registro_compromisos_route@10 main_abrir_registro_raices_route@11 main_registrar_raiz_route@12 main_cerrar_registro_raices_route@13 main_leer_datos_raices_route@14 main_abrir_registro_anuladores_route@15 main_registrar_anulador_route@16 main_enviar_papeleta_route@17 main_cerrar_registro_anuladores_route@18 main_recuperar_papeletas_route@19 main_finalizar_eleccion_route@20",
      "stack_out": []
    },
    "327": {
      "block": "main_after_if_else@23",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "328": {
      "op": "return",
      "stack_out": []
    },
    "329": {
      "block": "main_finalizar_eleccion_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "331": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "332": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "333": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "335": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "336": {
      "callsub": "smart_contracts.voto3.contract.Voto3.finalizar_eleccion",
      "op": "callsub finalizar_eleccion"
    },
    "339": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "340": {
      "op": "return",
      "stack_out": []
    },
    "341": {
      "block": "main_recuperar_papeletas_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "343": {
      "op": "!",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "344": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "345": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "347": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "348": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "351": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "354": {
      "callsub": "smart_contracts.voto3.contract.Voto3.recuperar_papeletas",
      "op": "callsub recuperar_papeletas",
      "stack_out": []
    },
    "357": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "358": {
      "op": "return",
      "stack_out": []
    },
    "359": {
      "block": "main_cerrar_registro_anuladores_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "361": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "362": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "363": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "365": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "366": {
      "callsub": "smart_contracts.voto3.contract.Voto3.cerrar_registro_anuladores",
      "op": "callsub cerrar_registro_anuladores",
      "defined_out": [
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0"
      ]
    },
    "369": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0"
      ]
    },
    "370": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0",
        "0x151f7c75"
      ]
    },
    "371": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%12#0"
      ]
    },
    "372": {
      "op": "concat",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "373": {
      "op": "log",
      "stack_out": []
    },
    "374": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "375": {
      "op": "return",
      "stack_out": []
    },
    "376": {
      "block": "main_enviar_papeleta_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "378": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "379": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "380": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "382": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "383": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "386": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "389": {
      "callsub": "smart_contracts.voto3.contract.Voto3.enviar_papeleta",
      "op": "callsub enviar_papeleta",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "392": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0"
      ]
    },
    "393": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "0x151f7c75"
      ]
    },
    "394": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ]
    },
    "395": {
      "op": "concat",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "396": {
      "op": "log",
      "stack_out": []
    },
    "397": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "398": {
      "op": "return",
      "stack_out": []
    },
    "399": {
      "block": "main_registrar_anulador_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "401": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "402": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "403": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "405": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "406": {
      "callsub": "smart_contracts.voto3.contract.Voto3.registrar_anulador",
      "op": "callsub registrar_anulador",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "409": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0"
      ]
    },
    "410": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "0x151f7c75"
      ]
    },
    "411": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ]
    },
    "412": {
      "op": "concat",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "413": {
      "op": "log",
      "stack_out": []
    },
    "414": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "415": {
      "op": "return",
      "stack_out": []
    },
    "416": {
      "block": "main_abrir_registro_anuladores_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "418": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "419": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "420": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "422": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "423": {
      "callsub": "smart_contracts.voto3.contract.Voto3.abrir_registro_anuladores",
      "op": "callsub abrir_registro_anuladores"
    },
    "426": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "427": {
      "op": "return",
      "stack_out": []
    },
    "428": {
      "block": "main_leer_datos_raices_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "430": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "431": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "432": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "434": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "435": {
      "callsub": "smart_contracts.voto3.contract.Voto3.leer_datos_raices",
      "op": "callsub leer_datos_raices",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "438": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%0#0"
      ]
    },
    "440": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0"
      ]
    },
    "441": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "elements_to_encode%1#0"
      ]
    },
    "443": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "444": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%2#0"
      ]
    },
    "446": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "447": {
      "op": "dig 3",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "449": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%3#0",
        "length%0#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "length%0#0"
      ]
    },
    "450": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "as_bytes%0#0"
      ]
    },
    "451": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%3#0",
        "length_uint16%0#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "length_uint16%0#0"
      ]
    },
    "454": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "length_uint16%0#0",
        "elements_to_encode%3#0"
      ]
    },
    "456": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_value%0#0"
      ]
    },
    "457": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_value%0#0",
        "val_as_bytes%7#0"
      ]
    },
    "459": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%9#0",
        "encoded_value%0#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "461": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "462": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%9#0"
      ]
    },
    "464": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "465": {
      "op": "pushbytes 0x001a",
      "defined_out": [
        "0x001a",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "0x001a"
      ]
    },
    "469": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "470": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ]
    },
    "471": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "472": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "0x151f7c75"
      ]
    },
    "473": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "474": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "475": {
      "op": "log",
      "stack_out": []
    },
    "476": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "477": {
      "op": "return",
      "stack_out": []
    },
    "478": {
      "block": "main_cerrar_registro_raices_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "480": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "481": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "482": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "484": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "485": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "488": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "491": {
      "callsub": "smart_contracts.voto3.contract.Voto3.cerrar_registro_raices",
      "op": "callsub cerrar_registro_raices",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "494": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0"
      ]
    },
    "495": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "0x151f7c75"
      ]
    },
    "496": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ]
    },
    "497": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "498": {
      "op": "log",
      "stack_out": []
    },
    "499": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "500": {
      "op": "return",
      "stack_out": []
    },
    "501": {
      "block": "main_registrar_raiz_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "503": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "504": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "505": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "507": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "508": {
      "callsub": "smart_contracts.voto3.contract.Voto3.registrar_raiz",
      "op": "callsub registrar_raiz",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "511": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "512": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "513": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "514": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "515": {
      "op": "log",
      "stack_out": []
    },
    "516": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "517": {
      "op": "return",
      "stack_out": []
    },
    "518": {
      "block": "main_abrir_registro_raices_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "520": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "521": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "522": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "524": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "525": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "528": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "529": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "532": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "533": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "536": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "537": {
      "callsub": "smart_contracts.voto3.contract.Voto3.abrir_registro_raices",
      "op": "callsub abrir_registro_raices",
      "stack_out": []
    },
    "540": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "541": {
      "op": "return",
      "stack_out": []
    },
    "542": {
      "block": "main_cerrar_registro_compromisos_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "544": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "545": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "546": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "548": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "549": {
      "callsub": "smart_contracts.voto3.contract.Voto3.cerrar_registro_compromisos",
      "op": "callsub cerrar_registro_compromisos",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "552": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "553": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "554": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "555": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "556": {
      "op": "log",
      "stack_out": []
    },
    "557": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "558": {
      "op": "return",
      "stack_out": []
    },
    "559": {
      "block": "main_registrar_compromiso_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "561": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "562": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "563": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "565": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "566": {
      "callsub": "smart_contracts.voto3.contract.Voto3.registrar_compromiso",
      "op": "callsub registrar_compromiso",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "569": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "570": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "571": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "572": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "573": {
      "op": "log",
      "stack_out": []
    },
    "574": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "575": {
      "op": "return",
      "stack_out": []
    },
    "576": {
      "block": "main_abrir_registro_compromisos_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "578": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "579": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "580": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "582": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "583": {
      "callsub": "smart_contracts.voto3.contract.Voto3.abrir_registro_compromisos",
      "op": "callsub abrir_registro_compromisos"
    },
    "586": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "587": {
      "op": "return",
      "stack_out": []
    },
    "588": {
      "block": "main_establecer_estado_contrato_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "590": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "591": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "592": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "594": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "595": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "598": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "599": {
      "callsub": "smart_contracts.voto3.contract.Voto3.establecer_estado_contrato",
      "op": "callsub establecer_estado_contrato",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "602": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "603": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "604": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "605": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "606": {
      "op": "log",
      "stack_out": []
    },
    "607": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "608": {
      "op": "return",
      "stack_out": []
    },
    "609": {
      "block": "main_leer_estado_contrato_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "611": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "612": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "613": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "615": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "616": {
      "callsub": "smart_contracts.voto3.contract.Voto3.leer_estado_contrato",
      "op": "callsub leer_estado_contrato",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "619": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "620": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "621": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "622": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "623": {
      "op": "log",
      "stack_out": []
    },
    "624": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "625": {
      "op": "return",
      "stack_out": []
    },
    "626": {
      "block": "main_inicializar_eleccion_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "628": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "629": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "630": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "632": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "633": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "636": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "639": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "642": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "645": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "648": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "649": {
      "callsub": "smart_contracts.voto3.contract.Voto3.inicializar_eleccion",
      "op": "callsub inicializar_eleccion",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "652": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "653": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "654": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "655": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "656": {
      "op": "log",
      "stack_out": []
    },
    "657": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "658": {
      "op": "return",
      "stack_out": []
    },
    "659": {
      "block": "main_bare_routing@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "661": {
      "op": "bnz main_after_if_else@23",
      "stack_out": []
    },
    "664": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "666": {
      "op": "!",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "667": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "668": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "669": {
      "op": "return",
      "stack_out": []
    },
    "670": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.inicializar_eleccion",
      "params": {
        "asset_name#0": "bytes",
        "unit_name#0": "bytes",
        "total#0": "uint64"
      },
      "block": "inicializar_eleccion",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "673": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "675": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "677": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "678": {
      "error": "Solo el creador puede inicializar la elecci\u00f3n",
      "op": "assert // Solo el creador puede inicializar la elecci\u00f3n",
      "stack_out": []
    },
    "679": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "680": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "681": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "682": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "683": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "684": {
      "error": "El contrato ya est\u00e1 inicializado",
      "op": "assert // El contrato ya est\u00e1 inicializado",
      "stack_out": []
    },
    "685": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset_name#0 (copy)"
      ],
      "stack_out": [
        "asset_name#0 (copy)"
      ]
    },
    "687": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "688": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "32"
      ]
    },
    "690": {
      "op": "<=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "691": {
      "error": "asset_name demasiado largo",
      "op": "assert // asset_name demasiado largo",
      "stack_out": []
    },
    "692": {
      "op": "frame_dig -2",
      "defined_out": [
        "unit_name#0 (copy)"
      ],
      "stack_out": [
        "unit_name#0 (copy)"
      ]
    },
    "694": {
      "op": "len",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "695": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "8"
      ]
    },
    "697": {
      "op": "<=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "698": {
      "error": "unit_name demasiado largo",
      "op": "assert // unit_name demasiado largo",
      "stack_out": []
    },
    "699": {
      "op": "itxn_begin"
    },
    "700": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "702": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "703": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "705": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": []
    },
    "707": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "708": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "710": {
      "op": "frame_dig -1",
      "defined_out": [
        "total#0 (copy)"
      ],
      "stack_out": [
        "total#0 (copy)"
      ]
    },
    "712": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "714": {
      "op": "frame_dig -2",
      "stack_out": [
        "unit_name#0 (copy)"
      ]
    },
    "716": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "718": {
      "op": "frame_dig -3",
      "stack_out": [
        "asset_name#0 (copy)"
      ]
    },
    "720": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "722": {
      "op": "intc_3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "723": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "725": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "726": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "728": {
      "op": "itxn_submit"
    },
    "729": {
      "op": "bytec_2 // \"papeletas\"",
      "defined_out": [
        "\"papeletas\""
      ],
      "stack_out": [
        "\"papeletas\""
      ]
    },
    "730": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "\"papeletas\"",
        "asset_txn.CreatedAssetID#0"
      ],
      "stack_out": [
        "\"papeletas\"",
        "asset_txn.CreatedAssetID#0"
      ]
    },
    "732": {
      "op": "app_global_put",
      "stack_out": []
    },
    "733": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "734": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"estado_contrato\"",
        "1"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "1"
      ]
    },
    "735": {
      "op": "app_global_put",
      "stack_out": []
    },
    "736": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "737": {
      "op": "bytec_2 // \"papeletas\"",
      "stack_out": [
        "0",
        "\"papeletas\""
      ]
    },
    "738": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "739": {
      "error": "check self.papeletas exists",
      "op": "assert // check self.papeletas exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "740": {
      "retsub": true,
      "op": "retsub"
    },
    "741": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.leer_estado_contrato",
      "params": {},
      "block": "leer_estado_contrato",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "743": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "745": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "746": {
      "error": "Solo el creador puede leer el estado del contrato",
      "op": "assert // Solo el creador puede leer el estado del contrato",
      "stack_out": []
    },
    "747": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "748": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "749": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "750": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "751": {
      "retsub": true,
      "op": "retsub"
    },
    "752": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.establecer_estado_contrato",
      "params": {
        "nuevo_estado#0": "uint64"
      },
      "block": "establecer_estado_contrato",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "755": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "757": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "759": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "760": {
      "error": "Solo el creador puede establecer el estado del contrato",
      "op": "assert // Solo el creador puede establecer el estado del contrato",
      "stack_out": []
    },
    "761": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\""
      ],
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "762": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"estado_contrato\"",
        "nuevo_estado#0 (copy)"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "nuevo_estado#0 (copy)"
      ]
    },
    "764": {
      "op": "app_global_put",
      "stack_out": []
    },
    "765": {
      "op": "frame_dig -1",
      "stack_out": [
        "nuevo_estado#0 (copy)"
      ]
    },
    "767": {
      "retsub": true,
      "op": "retsub"
    },
    "768": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.abrir_registro_compromisos",
      "params": {},
      "block": "abrir_registro_compromisos",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "770": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "772": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "773": {
      "error": "Solo el creador puede abrir el registro de compromisos",
      "op": "assert // Solo el creador puede abrir el registro de compromisos",
      "stack_out": []
    },
    "774": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "775": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "776": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "777": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "778": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "779": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "780": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "781": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "782": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "\"estado_contrato\"",
        "2"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "2"
      ]
    },
    "784": {
      "op": "app_global_put",
      "stack_out": []
    },
    "785": {
      "retsub": true,
      "op": "retsub"
    },
    "786": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.registrar_compromiso",
      "params": {},
      "block": "registrar_compromiso",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "788": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "790": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "791": {
      "error": "Solo el creador puede registrar compromisos",
      "op": "assert // Solo el creador puede registrar compromisos",
      "stack_out": []
    },
    "792": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "793": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "794": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "795": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "796": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "2"
      ]
    },
    "798": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "799": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "800": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "801": {
      "op": "bytec_3 // \"contador_compromisos\"",
      "defined_out": [
        "\"contador_compromisos\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_compromisos\""
      ]
    },
    "802": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "valor_actual#0"
      ],
      "stack_out": [
        "valor_actual#0",
        "maybe_exists%1#0"
      ]
    },
    "803": {
      "error": "check self.contador_compromisos exists",
      "op": "assert // check self.contador_compromisos exists",
      "stack_out": [
        "valor_actual#0"
      ]
    },
    "804": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "valor_actual#0"
      ],
      "stack_out": [
        "valor_actual#0",
        "1"
      ]
    },
    "805": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "806": {
      "op": "bytec_3 // \"contador_compromisos\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_compromisos\""
      ]
    },
    "807": {
      "op": "dig 1",
      "defined_out": [
        "\"contador_compromisos\"",
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_compromisos\"",
        "materialized_values%0#0 (copy)"
      ]
    },
    "809": {
      "op": "app_global_put",
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "810": {
      "retsub": true,
      "op": "retsub"
    },
    "811": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.cerrar_registro_compromisos",
      "params": {},
      "block": "cerrar_registro_compromisos",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "813": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "815": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "816": {
      "error": "Solo el creador puede cerrar el registro de compromisos",
      "op": "assert // Solo el creador puede cerrar el registro de compromisos",
      "stack_out": []
    },
    "817": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "818": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "819": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "820": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "821": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "2"
      ]
    },
    "823": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "824": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "825": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "826": {
      "op": "intc_3 // 3",
      "defined_out": [
        "\"estado_contrato\"",
        "3"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "3"
      ]
    },
    "827": {
      "op": "app_global_put",
      "stack_out": []
    },
    "828": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "829": {
      "op": "bytec_3 // \"contador_compromisos\"",
      "defined_out": [
        "\"contador_compromisos\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_compromisos\""
      ]
    },
    "830": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "831": {
      "error": "check self.contador_compromisos exists",
      "op": "assert // check self.contador_compromisos exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "832": {
      "retsub": true,
      "op": "retsub"
    },
    "833": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.abrir_registro_raices",
      "params": {
        "num_bloques#0": "uint64",
        "tam_bloque#0": "uint64",
        "tam_resto#0": "uint64"
      },
      "block": "abrir_registro_raices",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "836": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "838": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "840": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "841": {
      "error": "Solo el creador puede abrir el registro de ra\u00edces",
      "op": "assert // Solo el creador puede abrir el registro de ra\u00edces",
      "stack_out": []
    },
    "842": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "843": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "844": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "845": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "846": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "3"
      ]
    },
    "847": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "848": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "849": {
      "op": "bytec 7 // \"num_bloques\"",
      "defined_out": [
        "\"num_bloques\""
      ],
      "stack_out": [
        "\"num_bloques\""
      ]
    },
    "851": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"num_bloques\"",
        "num_bloques#0 (copy)"
      ],
      "stack_out": [
        "\"num_bloques\"",
        "num_bloques#0 (copy)"
      ]
    },
    "853": {
      "op": "app_global_put",
      "stack_out": []
    },
    "854": {
      "op": "bytec 8 // \"tam_bloque\"",
      "defined_out": [
        "\"tam_bloque\""
      ],
      "stack_out": [
        "\"tam_bloque\""
      ]
    },
    "856": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"tam_bloque\"",
        "tam_bloque#0 (copy)"
      ],
      "stack_out": [
        "\"tam_bloque\"",
        "tam_bloque#0 (copy)"
      ]
    },
    "858": {
      "op": "app_global_put",
      "stack_out": []
    },
    "859": {
      "op": "bytec 9 // \"tam_resto\"",
      "defined_out": [
        "\"tam_resto\""
      ],
      "stack_out": [
        "\"tam_resto\""
      ]
    },
    "861": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"tam_resto\"",
        "tam_resto#0 (copy)"
      ],
      "stack_out": [
        "\"tam_resto\"",
        "tam_resto#0 (copy)"
      ]
    },
    "863": {
      "op": "app_global_put",
      "stack_out": []
    },
    "864": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "865": {
      "op": "intc_2 // 4",
      "defined_out": [
        "\"estado_contrato\"",
        "4"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "4"
      ]
    },
    "866": {
      "op": "app_global_put",
      "stack_out": []
    },
    "867": {
      "retsub": true,
      "op": "retsub"
    },
    "868": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.registrar_raiz",
      "params": {},
      "block": "registrar_raiz",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "870": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "872": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "873": {
      "error": "Solo el creador puede registrar ra\u00edces",
      "op": "assert // Solo el creador puede registrar ra\u00edces",
      "stack_out": []
    },
    "874": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "875": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "876": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "877": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "878": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "4"
      ]
    },
    "879": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "880": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "881": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "882": {
      "op": "bytec 4 // \"contador_raices\"",
      "defined_out": [
        "\"contador_raices\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_raices\""
      ]
    },
    "884": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "valor_actual#0"
      ],
      "stack_out": [
        "valor_actual#0",
        "maybe_exists%1#0"
      ]
    },
    "885": {
      "error": "check self.contador_raices exists",
      "op": "assert // check self.contador_raices exists",
      "stack_out": [
        "valor_actual#0"
      ]
    },
    "886": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "valor_actual#0"
      ],
      "stack_out": [
        "valor_actual#0",
        "1"
      ]
    },
    "887": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "888": {
      "op": "bytec 4 // \"contador_raices\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_raices\""
      ]
    },
    "890": {
      "op": "dig 1",
      "defined_out": [
        "\"contador_raices\"",
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_raices\"",
        "materialized_values%0#0 (copy)"
      ]
    },
    "892": {
      "op": "app_global_put",
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "893": {
      "retsub": true,
      "op": "retsub"
    },
    "894": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.cerrar_registro_raices",
      "params": {
        "txnId_raiz#0": "bytes"
      },
      "block": "cerrar_registro_raices",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "897": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "899": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "901": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "902": {
      "error": "Solo el creador puede cerrar el registro de ra\u00edces",
      "op": "assert // Solo el creador puede cerrar el registro de ra\u00edces",
      "stack_out": []
    },
    "903": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "904": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "905": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "906": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "907": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "4"
      ]
    },
    "908": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "909": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "910": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "911": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "\"estado_contrato\"",
        "5"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "5"
      ]
    },
    "913": {
      "op": "app_global_put",
      "stack_out": []
    },
    "914": {
      "op": "bytec 10 // \"txnId_raiz\"",
      "defined_out": [
        "\"txnId_raiz\""
      ],
      "stack_out": [
        "\"txnId_raiz\""
      ]
    },
    "916": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"txnId_raiz\"",
        "txnId_raiz#0 (copy)"
      ],
      "stack_out": [
        "\"txnId_raiz\"",
        "txnId_raiz#0 (copy)"
      ]
    },
    "918": {
      "op": "app_global_put",
      "stack_out": []
    },
    "919": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "920": {
      "op": "bytec 4 // \"contador_raices\"",
      "defined_out": [
        "\"contador_raices\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_raices\""
      ]
    },
    "922": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "923": {
      "error": "check self.contador_raices exists",
      "op": "assert // check self.contador_raices exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "924": {
      "retsub": true,
      "op": "retsub"
    },
    "925": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.leer_datos_raices",
      "params": {},
      "block": "leer_datos_raices",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "926": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "927": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "928": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "929": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "5"
      ]
    },
    "931": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "932": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "933": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "934": {
      "op": "bytec 7 // \"num_bloques\"",
      "defined_out": [
        "\"num_bloques\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"num_bloques\""
      ]
    },
    "936": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "937": {
      "error": "check self.num_bloques exists",
      "op": "assert // check self.num_bloques exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "938": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "939": {
      "op": "bytec 8 // \"tam_bloque\"",
      "defined_out": [
        "\"tam_bloque\"",
        "0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"tam_bloque\""
      ]
    },
    "941": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "942": {
      "error": "check self.tam_bloque exists",
      "op": "assert // check self.tam_bloque exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "943": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "944": {
      "op": "bytec 9 // \"tam_resto\"",
      "defined_out": [
        "\"tam_resto\"",
        "0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"tam_resto\""
      ]
    },
    "946": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "947": {
      "error": "check self.tam_resto exists",
      "op": "assert // check self.tam_resto exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "948": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "949": {
      "op": "bytec 10 // \"txnId_raiz\"",
      "defined_out": [
        "\"txnId_raiz\"",
        "0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"txnId_raiz\""
      ]
    },
    "951": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "952": {
      "error": "check self.txnId_raiz exists",
      "op": "assert // check self.txnId_raiz exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "953": {
      "retsub": true,
      "op": "retsub"
    },
    "954": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.abrir_registro_anuladores",
      "params": {},
      "block": "abrir_registro_anuladores",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "956": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "958": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "959": {
      "error": "Solo el creador puede abrir el registro de anuladores",
      "op": "assert // Solo el creador puede abrir el registro de anuladores",
      "stack_out": []
    },
    "960": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "961": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "962": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "963": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "964": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "5"
      ]
    },
    "966": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "967": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "968": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "969": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "\"estado_contrato\"",
        "6"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "6"
      ]
    },
    "971": {
      "op": "app_global_put",
      "stack_out": []
    },
    "972": {
      "retsub": true,
      "op": "retsub"
    },
    "973": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.registrar_anulador",
      "params": {},
      "block": "registrar_anulador",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "975": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "977": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "978": {
      "error": "Solo el creador puede registrar anuladores",
      "op": "assert // Solo el creador puede registrar anuladores",
      "stack_out": []
    },
    "979": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "980": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "981": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "982": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "983": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "6"
      ]
    },
    "985": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "986": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "987": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "988": {
      "op": "bytec 5 // \"contador_anuladores\"",
      "defined_out": [
        "\"contador_anuladores\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_anuladores\""
      ]
    },
    "990": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "valor_actual#0"
      ],
      "stack_out": [
        "valor_actual#0",
        "maybe_exists%1#0"
      ]
    },
    "991": {
      "error": "check self.contador_anuladores exists",
      "op": "assert // check self.contador_anuladores exists",
      "stack_out": [
        "valor_actual#0"
      ]
    },
    "992": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "valor_actual#0"
      ],
      "stack_out": [
        "valor_actual#0",
        "1"
      ]
    },
    "993": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "994": {
      "op": "bytec 5 // \"contador_anuladores\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_anuladores\""
      ]
    },
    "996": {
      "op": "dig 1",
      "defined_out": [
        "\"contador_anuladores\"",
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"contador_anuladores\"",
        "materialized_values%0#0 (copy)"
      ]
    },
    "998": {
      "op": "app_global_put",
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "999": {
      "retsub": true,
      "op": "retsub"
    },
    "1000": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.enviar_papeleta",
      "params": {
        "destinatario#0": "bytes"
      },
      "block": "enviar_papeleta",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1003": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1005": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1007": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1008": {
      "error": "Solo el creador puede enviar papeletas",
      "op": "assert // Solo el creador puede enviar papeletas",
      "stack_out": []
    },
    "1009": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1010": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "1011": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1012": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1013": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "6"
      ]
    },
    "1015": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1016": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "1017": {
      "op": "itxn_begin"
    },
    "1018": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1019": {
      "op": "bytec_2 // \"papeletas\"",
      "defined_out": [
        "\"papeletas\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"papeletas\""
      ]
    },
    "1020": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1021": {
      "error": "check self.papeletas exists",
      "op": "assert // check self.papeletas exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1022": {
      "op": "frame_dig -1",
      "defined_out": [
        "destinatario#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "destinatario#0 (copy)"
      ]
    },
    "1024": {
      "op": "len",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "1025": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%4#0",
        "32"
      ]
    },
    "1027": {
      "op": "==",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%5#0"
      ]
    },
    "1028": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1029": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1031": {
      "op": "itxn_field Sender",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1033": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "destinatario#0 (copy)"
      ]
    },
    "1035": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1037": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1038": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1040": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "1042": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "1043": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1045": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1046": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1048": {
      "op": "itxn_submit"
    },
    "1049": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1050": {
      "op": "bytec 6 // \"papeletas_enviadas\"",
      "defined_out": [
        "\"papeletas_enviadas\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"papeletas_enviadas\""
      ]
    },
    "1052": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "valor_actual#0"
      ],
      "stack_out": [
        "valor_actual#0",
        "maybe_exists%2#0"
      ]
    },
    "1053": {
      "error": "check self.papeletas_enviadas exists",
      "op": "assert // check self.papeletas_enviadas exists",
      "stack_out": [
        "valor_actual#0"
      ]
    },
    "1054": {
      "op": "intc_1 // 1",
      "stack_out": [
        "valor_actual#0",
        "1"
      ]
    },
    "1055": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "1056": {
      "op": "bytec 6 // \"papeletas_enviadas\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"papeletas_enviadas\""
      ]
    },
    "1058": {
      "op": "dig 1",
      "defined_out": [
        "\"papeletas_enviadas\"",
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"papeletas_enviadas\"",
        "materialized_values%0#0 (copy)"
      ]
    },
    "1060": {
      "op": "app_global_put",
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "1061": {
      "retsub": true,
      "op": "retsub"
    },
    "1062": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.cerrar_registro_anuladores",
      "params": {},
      "block": "cerrar_registro_anuladores",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1064": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1066": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1067": {
      "error": "Solo el creador puede cerrar el registro de anuladores",
      "op": "assert // Solo el creador puede cerrar el registro de anuladores",
      "stack_out": []
    },
    "1068": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1069": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "1070": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1071": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1072": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "6"
      ]
    },
    "1074": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1075": {
      "error": "El contrato no est\u00e1 en el estado correcto",
      "op": "assert // El contrato no est\u00e1 en el estado correcto",
      "stack_out": []
    },
    "1076": {
      "op": "bytec_0 // \"estado_contrato\"",
      "stack_out": [
        "\"estado_contrato\""
      ]
    },
    "1077": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "\"estado_contrato\"",
        "7"
      ],
      "stack_out": [
        "\"estado_contrato\"",
        "7"
      ]
    },
    "1079": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1080": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1081": {
      "op": "bytec 5 // \"contador_anuladores\"",
      "defined_out": [
        "\"contador_anuladores\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contador_anuladores\""
      ]
    },
    "1083": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1084": {
      "error": "check self.contador_anuladores exists",
      "op": "assert // check self.contador_anuladores exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1085": {
      "retsub": true,
      "op": "retsub"
    },
    "1086": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.recuperar_papeletas",
      "params": {
        "cuenta#0": "bytes"
      },
      "block": "recuperar_papeletas",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1089": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1091": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1093": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1094": {
      "error": "Solo el creador puede recuperar papeletas",
      "op": "assert // Solo el creador puede recuperar papeletas",
      "stack_out": []
    },
    "1095": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1096": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "1097": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1098": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1099": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "7"
      ]
    },
    "1101": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1102": {
      "error": "La elecci\u00f3n no ha acabado",
      "op": "assert // La elecci\u00f3n no ha acabado",
      "stack_out": []
    },
    "1103": {
      "op": "itxn_begin"
    },
    "1104": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1105": {
      "op": "bytec_2 // \"papeletas\"",
      "defined_out": [
        "\"papeletas\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"papeletas\""
      ]
    },
    "1106": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1107": {
      "error": "check self.papeletas exists",
      "op": "assert // check self.papeletas exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1108": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1110": {
      "op": "frame_dig -1",
      "defined_out": [
        "cuenta#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "cuenta#0 (copy)"
      ]
    },
    "1112": {
      "op": "len",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%4#0"
      ]
    },
    "1113": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%4#0",
        "32"
      ]
    },
    "1115": {
      "op": "==",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%5#0"
      ]
    },
    "1116": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1117": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "cuenta#0 (copy)"
      ]
    },
    "1119": {
      "op": "itxn_field Sender",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1121": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1123": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1124": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1126": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "1128": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "1129": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1131": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1132": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1134": {
      "op": "itxn_submit"
    },
    "1135": {
      "retsub": true,
      "op": "retsub"
    },
    "1136": {
      "subroutine": "smart_contracts.voto3.contract.Voto3.finalizar_eleccion",
      "params": {},
      "block": "finalizar_eleccion",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1139": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1141": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1143": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1144": {
      "error": "Solo el creador puede finalizar la elecci\u00f3n",
      "op": "assert // Solo el creador puede finalizar la elecci\u00f3n",
      "stack_out": []
    },
    "1145": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1146": {
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"estado_contrato\""
      ]
    },
    "1147": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1148": {
      "error": "check self.estado_contrato exists",
      "op": "assert // check self.estado_contrato exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1149": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "7"
      ]
    },
    "1151": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1152": {
      "error": "La elecci\u00f3n no ha acabado",
      "op": "assert // La elecci\u00f3n no ha acabado",
      "stack_out": []
    },
    "1153": {
      "op": "itxn_begin"
    },
    "1154": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1155": {
      "op": "bytec_2 // \"papeletas\"",
      "defined_out": [
        "\"papeletas\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"papeletas\""
      ]
    },
    "1156": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1157": {
      "error": "check self.papeletas exists",
      "op": "assert // check self.papeletas exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1158": {
      "op": "global ZeroAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1160": {
      "op": "dupn 3",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "1162": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0"
      ]
    },
    "1164": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "1166": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1168": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1170": {
      "op": "itxn_field ConfigAsset",
      "stack_out": []
    },
    "1172": {
      "op": "intc_3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "1173": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1175": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1176": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1178": {
      "op": "itxn_submit"
    },
    "1179": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1181": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "saldo#0"
      ],
      "stack_out": [
        "saldo#0",
        "check%0#0"
      ]
    },
    "1183": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "saldo#0"
      ]
    },
    "1184": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "saldo#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "saldo#0",
        "tmp%5#0"
      ]
    },
    "1186": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%1#0",
        "min_balance#0",
        "saldo#0"
      ],
      "stack_out": [
        "saldo#0",
        "min_balance#0",
        "check%1#0"
      ]
    },
    "1188": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "saldo#0",
        "min_balance#0"
      ]
    },
    "1189": {
      "op": "-",
      "defined_out": [
        "excedente#0"
      ],
      "stack_out": [
        "excedente#0"
      ]
    },
    "1190": {
      "op": "dup",
      "defined_out": [
        "excedente#0"
      ],
      "stack_out": [
        "excedente#0",
        "excedente#0"
      ]
    },
    "1191": {
      "op": "bz finalizar_eleccion_after_if_else@4",
      "stack_out": [
        "excedente#0"
      ]
    },
    "1194": {
      "op": "itxn_begin"
    },
    "1195": {
      "op": "global CreatorAddress",
      "defined_out": [
        "excedente#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "excedente#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "1197": {
      "op": "frame_dig 0",
      "stack_out": [
        "excedente#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "excedente#0"
      ]
    },
    "1199": {
      "op": "itxn_field Amount",
      "stack_out": [
        "excedente#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "1201": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "excedente#0"
      ]
    },
    "1203": {
      "op": "intc_1 // pay",
      "defined_out": [
        "excedente#0",
        "pay"
      ],
      "stack_out": [
        "excedente#0",
        "pay"
      ]
    },
    "1204": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "excedente#0"
      ]
    },
    "1206": {
      "op": "intc_0 // 0",
      "stack_out": [
        "excedente#0",
        "0"
      ]
    },
    "1207": {
      "op": "itxn_field Fee",
      "stack_out": [
        "excedente#0"
      ]
    },
    "1209": {
      "op": "itxn_submit"
    },
    "1210": {
      "block": "finalizar_eleccion_after_if_else@4",
      "stack_in": [
        "excedente#0"
      ],
      "op": "bytec_0 // \"estado_contrato\"",
      "defined_out": [
        "\"estado_contrato\""
      ],
      "stack_out": [
        "excedente#0",
        "\"estado_contrato\""
      ]
    },
    "1211": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "\"estado_contrato\"",
        "8"
      ],
      "stack_out": [
        "excedente#0",
        "\"estado_contrato\"",
        "8"
      ]
    },
    "1213": {
      "op": "app_global_put",
      "stack_out": [
        "excedente#0"
      ]
    },
    "1214": {
      "retsub": true,
      "op": "retsub"
    }
  }
}